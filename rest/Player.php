<?php
require_once ("Player.php");

/*
 * A domain Class Game
 */

class Player {

    public $id;                  // Unique id in DB
    public $gameId;              // Unique id of game in DB
    public $playerId;            // Ordinal from player type
    public $playerName;          // Player name
    public $serverRoll;          // Roll generated by server
    public $clientRoll;          // Roll generated by client
    public $clientRound;         // Round sent from client
    public $gamePos;             // Position/field in game
    public $lastUpdateTime;      // Last timestamp of change
    public $lastReadTime;        // Last timestamp of read or change
    public $messages;            // Messages for player

    function __construct() {
    }

    public static function withFull($game, $playerId, $playerName) {
        $instance = new self();
        $instance->gameId = $game->id;
        $instance->playerId = self::findFreePlayerId($game, $playerId);
        $instance->playerName = $playerName;
        $instance->serverRoll = -1;
        $instance->clientRoll = -1;
        $instance->clientRound = 0;
        $instance->gamePos = 0;
        $instance->lastUpdateTime = time();
        $instance->lastReadTime = time();
        $instance->messages = "";

        return $instance;
    }

    public static function findFreePlayerId( $game, $playerId ) {
        if ($playerId == -1) {
            $gameIds = array_keys($game->players);
            for ($gamePlayerId = 0; $gamePlayerId < $game->maxPlayers; $gamePlayerId++ ) {
                if (!in_array($gamePlayerId, $gameIds)) {
                    return $gamePlayerId;
                }
            }
        }
        return $playerId;
    }

    public static function withRow( array $row ) {
        $instance = new self();
        $instance->id = $row["ID"];
        $instance->gameId = $row["GAME_ID"];
        $instance->playerId = $row["PLAYER_ID"];
        $instance->playerName = $row["PLAYER_NAME"];
        $instance->serverRoll = $row["SERVER_ROLL"];
        $instance->clientRoll = $row["CLIENT_ROLL"];
        $instance->clientRound = $row["CLIENT_ROUND"];
        $instance->gamePos = $row["GAME_POS"];
        $instance->lastUpdateTime = $row["LAST_UPDATE_TIME"];
        $instance->lastReadTime = $row["LAST_READ_TIME"];
        $instance->messages = $row["MESSAGES"];

        return $instance;
    }

    public function rollDice($clientRoll, $clientRound) {
        $this->lastUpdateTime = time();
        $this->lastReadTime = time();
        $this->clientRoll = $clientRoll;
        $this->clientRound = $clientRound;
        $this->serverRoll = rand(1, 6);
        $this->gamePos += $this->serverRoll;
    }

    public function nextPlayer($clientRound) {
        $this->lastUpdateTime = time();
        $this->lastReadTime = time();
        $this->clientRound = $clientRound;
    }

    public function addMessage($playerId, $serverRoll) {
        if (strlen($this->messages) == 0) {
            $this->messages = $playerId."=".$serverRoll;
        } else {
            $this->messages = $this->messages.",".$playerId."=".$serverRoll;
        }
    }
}

